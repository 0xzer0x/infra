#!/usr/bin/env bash
set -eu
# SEE wf-recorder man page for options
# -r FRAMERATE
# -a [DEVICE] (capture audio from DEVICE) (pactl list sources | grep Name)
# -c VIDEO_CODEC (ffmpeg -hide_banner -encoders | grep -E '^ V' | grep -F '(codec' | cut -c 8- | sort)
# -C AUDIO_CODEC (ffmpeg -hide_banner -encoders | grep -E '^ A' | grep -F '(codec' | cut -c 8- | sort)
# -b 0 (nvenc encoder fix)[https://github.com/ammen99/wf-recorder/issues/205]
# -f FILE (filename with extension)
# -g GEOMETRY (x,y WxH)

# == script vars
declare -A devices
waybar_sleep_timer=0
sound=""
mode=""
audiodev=""
timer=""

# == wf-recorder config
outdir="$(xdg-user-dir VIDEOS)/recordings"
out="$outdir/$(date +%F_%H_%M_%S_$RANDOM).mp4"
encoding='h264_vaapi'
params="-r 60 -c $encoding -f $out"

# == rofi config
theme="$HOME/.config/rofi/screenrec/style.rasi"
device_list_theme="$HOME/.config/rofi/screenrec/device-list.rasi"
prompt='Record'
mesg="DIR: $(xdg-user-dir VIDEOS)/recordings"
win_width='500px'
list_row='1'
list_col='4'
option_screen=""
option_area=""
option_record5="󱇸"
option_record10="󰵱"
yes=''
no=''

select-mode-rofi() {
  echo -e "$option_screen\n$option_area\n$option_record5\n$option_record10" | rofi -theme-str "window {width: $win_width;}" \
    -theme-str "listview {columns: $list_col; lines: $list_row;}" \
    -theme-str 'textbox-prompt-colon {str: "󰕧";}' \
    -dmenu \
    -p "$prompt" \
    -mesg "$mesg" \
    -markup-rows \
    -theme "${theme}"
}

select-audio-rofi() {
  mapfile -t sources_list < <(pactl list sources | grep Name | awk '{ print $2 }')
  for source in "${sources_list[@]}"; do
    local source_key
    source_key="$(awk -F '.' '{ type="source"; dev=$NF } /\.monitor$/ { type="monitor"; dev=$(NF-1) } { print type,"(" dev ")" } ' <<<"$source")"
    devices[$source_key]="$source"
  done

  local IFS=$'\n'
  audiodev=$(echo -en "default\n${!devices[*]}" | rofi -dmenu -theme "${device_list_theme}")
  if [[ -z "$audiodev" ]]; then
    exit 1
  fi
}

confirm-rofi() {
  rofi -theme-str 'window {location: center; anchor: center; fullscreen: false; width: 350px;}' \
    -theme-str 'mainbox {children: [ "message", "listview" ];}' \
    -theme-str 'listview {columns: 2; lines: 1;}' \
    -theme-str 'element-text {horizontal-align: 0.5;}' \
    -theme-str 'textbox {horizontal-align: 0.5;}' \
    -dmenu \
    -p "$1" \
    -mesg "$2" \
    -theme "${theme}"
}

wf-notify() {
  [[ "$#" -ne "1" ]] && echo "$0: exactly 1 argument required." && exit 1
  local msg=""
  case "$1" in
  started)
    local mode_text="screen"
    local sound_text="no audio"
    [[ $mode = "$option_area" ]] && mode_text="area"
    [[ $sound = "$yes" ]] && sound_text="$audiodev"
    msg="Recording started\nencoding: $encoding\nmode: $mode_text\nsound: $sound_text\npath: $out"
    ;;
  stopped)
    msg="Recording saved to $out"
    ;;
  *)
    shift
    msg="$*"
    ;;
  esac
  notify-send -i media-record "WF Recorder" "$msg"
}

set-mode() {
  mode="$(select-mode-rofi)"
  if [[ "$mode" = "$option_area" ]]; then
    geom=$(slurp)
    params="-g '$geom' $params"
  elif [[ $mode = "$option_record5" ]]; then
    timer="5"
  elif [[ $mode = "$option_record10" ]]; then
    timer="10"
  fi
}

set-sound() {
  sound=$(echo -e "$yes\n$no" | confirm-rofi "Confirmation" "Capture Audio?")
  if [[ "$sound" = "$yes" ]]; then
    select-audio-rofi
    case "$audiodev" in
    "default" | "")
      audioparam="-a"
      ;;
    *)
      audioparam="--audio=${devices[$audiodev]}"
      ;;
    esac
    params="$audioparam $params"
  fi
}

recording() {
  running_pid=$(pgrep wf-recorder)
  test -n "$running_pid"
  return "$?"
}

start-recording() {
  echo "$params" | xargs wf-recorder 1>"$out.log" 2>&1 &
  wf-notify started
}

stop-recording() {
  kill "$running_pid"
  wf-notify stopped
}

countdown() {
  [[ "$#" -ne "1" ]] && echo "$0: exactly 1 argument required." && exit 1
  for sec in $(seq "$1" -1 1); do
    dunstify -t 1000 --replace=699 "Recording in: $sec"
    sleep 1
  done
}

if [[ ! -d "$outdir" ]]; then
  mkdir -p "$outdir"
fi

if recording; then
  waybar_sleep_timer=0.4
  stop-recording
else
  set-mode
  set-sound
  if [[ "$timer" -gt "0" ]]; then
    countdown "$timer"
  else
    sleep 0.4
  fi
  start-recording
fi

waybar_pid=$(pgrep waybar)
if [[ -n "$waybar_pid" ]]; then
  sleep "$waybar_sleep_timer"
  kill -35 "$waybar_pid"
fi
